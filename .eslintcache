[{"C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\index.js":"1","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\App.js":"2","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Store\\store.js":"3","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Store\\Auth.js":"4","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Store\\Uivisible.js":"5","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\AuthForm\\AuthForm.js":"6","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Store\\Action-thunk.js":"7","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\TextEditing\\TextEditing.js":"8","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Store\\MailSlice.js":"9","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Store\\Mail-thunk.js":"10","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\InboxPage.js\\InboxPage.js":"11","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\InboxPage.js\\InboxList.js":"12","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\InboxPage.js\\InboxNavbar.js":"13","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\InboxPage.js\\InboxListItem.js":"14","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\InboxPage.js\\MessageView.js":"15","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\InboxPage.js\\Sentmessage\\SentMessage.js":"16","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\InboxPage.js\\Sentmessage\\SendmessageItem.js":"17","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Store\\MymailSlice.js":"18","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\InboxPage.js\\Sentmessage\\sentMessageView.js":"19","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\AuthForm\\loginForm.js":"20","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\InboxPage.js\\ToggleMenuButton.js":"21"},{"size":502,"mtime":1684726368531,"results":"22","hashOfConfig":"23"},{"size":2585,"mtime":1684730014880,"results":"24","hashOfConfig":"23"},{"size":407,"mtime":1670039479314,"results":"25","hashOfConfig":"23"},{"size":424,"mtime":1670111614430,"results":"26","hashOfConfig":"23"},{"size":389,"mtime":1669890450315,"results":"27","hashOfConfig":"23"},{"size":3211,"mtime":1684692685404,"results":"28","hashOfConfig":"23"},{"size":2197,"mtime":1670112296264,"results":"29","hashOfConfig":"23"},{"size":4028,"mtime":1670159055441,"results":"30","hashOfConfig":"23"},{"size":1495,"mtime":1670119746332,"results":"31","hashOfConfig":"23"},{"size":5043,"mtime":1674103184392,"results":"32","hashOfConfig":"23"},{"size":4819,"mtime":1684753953379,"results":"33","hashOfConfig":"23"},{"size":793,"mtime":1684747224883,"results":"34","hashOfConfig":"23"},{"size":10837,"mtime":1684751288064,"results":"35","hashOfConfig":"23"},{"size":3385,"mtime":1684753472653,"results":"36","hashOfConfig":"23"},{"size":904,"mtime":1684737220136,"results":"37","hashOfConfig":"23"},{"size":726,"mtime":1670125174813,"results":"38","hashOfConfig":"23"},{"size":1745,"mtime":1670168144396,"results":"39","hashOfConfig":"23"},{"size":968,"mtime":1670158380181,"results":"40","hashOfConfig":"23"},{"size":965,"mtime":1670111369891,"results":"41","hashOfConfig":"23"},{"size":1426,"mtime":1684728992236,"results":"42","hashOfConfig":"23"},{"size":2382,"mtime":1684744901179,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"lj8f1e",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\index.js",[],["93","94"],"C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\App.js",["95","96","97"],"C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Store\\store.js",[],"C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Store\\Auth.js",[],"C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Store\\Uivisible.js",[],"C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\AuthForm\\AuthForm.js",["98"],"import Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Col, Row, Container } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { sendsignup, Sendlogin } from \"../../Store/Action-thunk\";\r\nimport { UisliceAction } from \"../../Store/Uivisible\";\r\n\r\nconst AuthForm = () => {\r\n  const Disptach = useDispatch();\r\n  const islogin = useSelector((state) => state.uiauth.islogin);\r\n  const Enteredemail = React.createRef(null);\r\n  const EnteredPassword = React.createRef(null);\r\n  const EnteredConfirmPassword = React.createRef(null);\r\n  const onsubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    const obj = {\r\n      email: Enteredemail.current.value,\r\n      password: EnteredPassword.current.value,\r\n      returnSecureToken: true,\r\n    };\r\n    if (obj.email === \"\" && obj.password === \"\") {\r\n      return;\r\n    }\r\n    if (islogin) {\r\n      Disptach(Sendlogin(obj));\r\n    }\r\n    if (!islogin && obj.password === EnteredConfirmPassword.current.value) {\r\n      Disptach(sendsignup(obj));\r\n    }\r\n\r\n    // console.log(obj);\r\n  };\r\n  const buttonToggle = () => {\r\n    Disptach(UisliceAction.setisLogin());\r\n  };\r\n  return (\r\n    <Container className=\"pt-5\">\r\n      <Row className=\"justify-content-md-center\">\r\n        <Col xs={12} md={4}>\r\n          <Form\r\n            className=\"shadow p-3 mt-5 bg-white rounded\"\r\n            onSubmit={onsubmitHandler}\r\n          >\r\n            <h3>{islogin ? \"Login\" : \"SignUp\"}</h3>\r\n            <Form.Group controlId=\"email\">\r\n              <Form.Label>Email Address</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter email\"\r\n                ref={Enteredemail}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"password\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                placeholder=\"Enter password\"\r\n                autoComplete=\"off\"\r\n                ref={EnteredPassword}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            {!islogin && (\r\n              <Form.Group controlId=\"Confirm Password\">\r\n                <Form.Label>Confirm Password</Form.Label>\r\n                <Form.Control\r\n                  type=\"password\"\r\n                  placeholder=\"Enter password\"\r\n                  ref={EnteredConfirmPassword}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n            )}\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"primary\"\r\n              className=\"btn btn-primary btn-lg btn-block mb-2\"\r\n            >\r\n              {islogin ? \"Login\" : \"SignUp\"}\r\n            </Button>\r\n            <Form.Group controlId=\"btn-secondary\">\r\n              <Button\r\n                className=\"btn btn-secondary btn-lg btn-block\"\r\n                onClick={buttonToggle}\r\n              >\r\n                {islogin ? \"SignUp\" : \"Login existing account\"}\r\n              </Button>\r\n            </Form.Group>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Store\\Action-thunk.js",[],"C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\TextEditing\\TextEditing.js",["99"],"import React from \"react\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\r\nimport { Row, Col, Container, Card, Button } from \"react-bootstrap\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport \"./TextEditing.css\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { sendMailHandler } from \"../../Store/Mail-thunk\";\r\nimport { MymailSliceAction } from \"../../Store/MymailSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n// import { EditorState, convertFromRaw, convertToRaw } from \"draft-js\";\r\n\r\nconst TextEditing = () => {\r\n  const Disptach = useDispatch();\r\n  const Enteredemail = React.createRef(null);\r\n  const Enteredsubject = React.createRef(null);\r\n  const Enteredtext = React.createRef(null);\r\n  const sentItemlist = useSelector((state) => state.mymail.sentItem);\r\n\r\n  const FormsubmitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    let uid = Date.now().toString(36) + Math.random().toString(36).substr(2);\r\n    const mailData = {\r\n      email: Enteredemail.current.value,\r\n      subject: Enteredsubject.current.value,\r\n      text: Enteredtext.current.value,\r\n      From: localStorage.getItem(\"mailid\"),\r\n      readreceipt: false,\r\n    };\r\n    if (mailData.email === \"\") {\r\n      return;\r\n    }\r\n    Disptach(sendMailHandler(mailData));\r\n    if (sentItemlist.length > 0) {\r\n      let oldlist = sentItemlist;\r\n      let sentItem = [{ ...mailData, id: uid }, ...oldlist];\r\n\r\n      console.log(sentItem);\r\n      Disptach(MymailSliceAction.updateSendItem(sentItem));\r\n    } else {\r\n      Disptach(MymailSliceAction.updateSendItem([{ ...mailData, id: uid }]));\r\n    }\r\n    Enteredemail.current.value = null;\r\n    Enteredsubject.current.value = null;\r\n    Enteredtext.current.value = null;\r\n    console.log(mailData, \"TextEditing-FormsubmitHandler\");\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Container fluid>\r\n        <Row>\r\n          <Col>\r\n            <Form className=\"pt-1  pr-3\" onSubmit={FormsubmitHandler}>\r\n              <Card style={{ width: \"50rem\" }}>\r\n                {/* {loadingspinner && (\r\n                  <Spinner animation=\"border\" variant=\"primary\" />\r\n                )} */}\r\n                {/* <Card.Header>\r\n                  <h3>welcome </h3>\r\n                </Card.Header> */}\r\n                <Card.Body className=\"colours\">\r\n                  <Form.Group controlId=\"email\">\r\n                    <Form.Label>Email Address</Form.Label>\r\n                    <Form.Control\r\n                      size=\"sm\"\r\n                      type=\"email\"\r\n                      placeholder=\"Enter email\"\r\n                      ref={Enteredemail}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"subject\">\r\n                    <Form.Label>subject</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      placeholder=\"Enter subject\"\r\n                      ref={Enteredsubject}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"message\">\r\n                    <Form.Label>message</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows={5} ref={Enteredtext} />\r\n                  </Form.Group>\r\n                </Card.Body>\r\n\r\n                <Card.Footer>\r\n                  <Editor\r\n                    // editorState={editorState}\r\n                    toolbarClassName=\"toolbarClassName\"\r\n                    wrapperClassName=\"wrapperClassName\"\r\n                    editorClassName=\"editorClassName\"\r\n                    // onEditorStateChange={updateTextDescription}\r\n                  />\r\n                  <Button variant=\"primary\" type=\"submit\">\r\n                    Send\r\n                  </Button>\r\n                </Card.Footer>\r\n              </Card>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default TextEditing;\r\n","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Store\\MailSlice.js",["100"],"import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialval = {\r\n  // sendMail: false,\r\n  // getMail: false,\r\n  items: [],\r\n  count: 0,\r\n  unread: 0,\r\n  messageView: {},\r\n  sentItem: [],\r\n};\r\n\r\nconst MailSlice = createSlice({\r\n  name: \"mail\",\r\n  initialState: initialval,\r\n  reducers: {\r\n    setSentData(state, action) {\r\n      state.sendMail = !state.sendMail;\r\n      state.count = state.count + 1;\r\n\r\n      console.log(\"success\");\r\n    },\r\n    // setGetMail(state, action) {\r\n    //   console.log(\"getmail\", state.unread);\r\n    // },\r\n    addItem(state, action) {\r\n      state.items = action.payload;\r\n\r\n      let Unreadmessage = 0;\r\n      state.items.map((item) => {\r\n        if (!item.readreceipt === true) {\r\n          Unreadmessage++;\r\n        }\r\n        return;\r\n      });\r\n      state.unread = Unreadmessage;\r\n      // console.log(state.unread);\r\n      // console.log(action.payload.transformeddata);\r\n    },\r\n    updataItems(state, action) {\r\n      state.count = state.count + 1;\r\n    },\r\n    DeleteItem(state, action) {\r\n      state.count = state.count + 1;\r\n      console.log(\"deleted\");\r\n    },\r\n    addMessageViewinfo(state, action) {\r\n      state.messageView = action.payload;\r\n      // console.log(\" addMessageViewinfo\", action.payload);\r\n    },\r\n    // RemovesentMail(state, action) {\r\n    //   // console.log(state.sentItem);\r\n    //   state.sentItem = action.payload;\r\n    // },\r\n  },\r\n});\r\nexport const MailSliceAction = MailSlice.actions;\r\nexport default MailSlice;\r\n","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Store\\Mail-thunk.js",["101"],"import { MailSliceAction } from \"./MailSlice\";\r\nimport { MymailSliceAction } from \"./MymailSlice\";\r\n\r\n//sending mail\r\nexport const sendMailHandler = (mailobj) => {\r\n  return async (Disptach) => {\r\n    let emailId = await mailobj.email.replace(/[&@.]/g, \"\");\r\n\r\n    const sendingmail = async () => {\r\n      const response = await fetch(\r\n        `https://mailbox-client-26e9b-default-rtdb.firebaseio.com/${emailId}/inbox.json`,\r\n        {\r\n          method: \"POST\",\r\n          body: JSON.stringify(mailobj),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      const data = await response.json();\r\n      if (data.error) {\r\n        throw new Error(\"faild\");\r\n      }\r\n      //   console.log(data);\r\n      return data;\r\n    };\r\n    try {\r\n      await sendingmail();\r\n\r\n      // Disptach(MailSliceAction.setSentData());\r\n      //   console.log(data);\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n};\r\n\r\n//get all mail\r\nexport const getmailHandler = () => {\r\n  let emailId = localStorage.getItem(\"mailid\").replace(/[&@.]/g, \"\");\r\n  // console.log(emailId);\r\n  return async (Disptach) => {\r\n    const gettingMailList = async () => {\r\n      const response = await fetch(\r\n        `https://mailbox-client-26e9b-default-rtdb.firebaseio.com//${emailId}.json`,\r\n        {\r\n          method: \"GET\",\r\n        }\r\n      );\r\n      const data = await response.json();\r\n      // if (data.inbox) {\r\n      //   return data;\r\n      // }\r\n      // console.log(data.inbox);\r\n      if (data.error) {\r\n        console.log(data);\r\n        throw new Error(\"faild\");\r\n      }\r\n\r\n      return data;\r\n    };\r\n    try {\r\n      const data = await gettingMailList();\r\n      const items = data.inbox;\r\n      let sentItem = data.sentItem;\r\n\r\n      const transformeddata = [];\r\n\r\n      for (const key in items) {\r\n        const Obj = {\r\n          id: key,\r\n          ...items[key],\r\n        };\r\n        transformeddata.push(Obj);\r\n      }\r\n      Disptach(MailSliceAction.addItem(transformeddata));\r\n      if (sentItem) {\r\n        Disptach(MymailSliceAction.AddSenditemList(sentItem));\r\n      }\r\n    } catch (error) {\r\n      // console.log(\"error message\");\r\n      // console.log(data);\r\n    }\r\n  };\r\n};\r\n\r\n//Read readreceipt update\r\nexport const UpdateList = (obj) => {\r\n  return async (Dispatch) => {\r\n    let emailId = localStorage.getItem(\"mailid\").replace(/[&@.]/g, \"\");\r\n\r\n    const UpdateEmailList = async () => {\r\n      const response = await fetch(\r\n        `https://mailbox-client-26e9b-default-rtdb.firebaseio.com//${emailId}/inbox/${obj.id}.json`,\r\n        {\r\n          method: \"PUT\",\r\n          body: JSON.stringify({\r\n            email: obj.email,\r\n            subject: obj.subject,\r\n            text: obj.text,\r\n            From: obj.From,\r\n            readreceipt: true,\r\n          }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      const data = await response.json();\r\n      if (data.error) {\r\n        throw new Error(\"faild\");\r\n      }\r\n      return data;\r\n    };\r\n    try {\r\n      await UpdateEmailList();\r\n      Dispatch(MailSliceAction.updataItems());\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n};\r\n//inbox mail delete\r\nexport const DeleteMail = (id) => {\r\n  return async (Dispatch) => {\r\n    let emailId = localStorage.getItem(\"mailid\").replace(/[&@.]/g, \"\");\r\n\r\n    const DeletingMail = async () => {\r\n      const response = await fetch(\r\n        `https://mailbox-client-26e9b-default-rtdb.firebaseio.com//${emailId}/inbox/${id}.json`,\r\n        {\r\n          method: \"DELETE\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      const data = await response.json();\r\n      if (data.error) {\r\n        console.log(data);\r\n        // throw new Error(\"faild\");\r\n      }\r\n      return data;\r\n    };\r\n    try {\r\n      const data = await DeletingMail();\r\n      Dispatch(MailSliceAction.DeleteItem());\r\n    } catch (error) {\r\n      // console.log(error);\r\n      Dispatch(MailSliceAction.DeleteItem());\r\n    }\r\n  };\r\n};\r\n\r\n//send maild upadte\r\nexport const UpdateMySentItem = (sentItem) => {\r\n  return async (Dispatch) => {\r\n    let emailId = localStorage.getItem(\"mailid\").replace(/[&@.]/g, \"\");\r\n\r\n    const UpdatedingmySendingItem = async () => {\r\n      const response = await fetch(\r\n        `https://mailbox-client-26e9b-default-rtdb.firebaseio.com/${emailId}/sentItem/.json`,\r\n        {\r\n          method: \"PUT\",\r\n          body: JSON.stringify(sentItem),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      const data = await response.json();\r\n      if (data.error) {\r\n        throw new Error(\"faild\");\r\n      }\r\n      return data;\r\n    };\r\n    try {\r\n      const data = await UpdatedingmySendingItem();\r\n      console.log(data);\r\n\r\n      // Dispatch( MymailSliceAction.sendItemUpdateTrigge());\r\n    } catch (error) {\r\n      // console.log(error);\r\n    }\r\n  };\r\n};\r\n","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\InboxPage.js\\InboxPage.js",["102","103","104","105"],"C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\InboxPage.js\\InboxList.js",[],"C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\InboxPage.js\\InboxNavbar.js",["106","107","108","109","110","111"],"C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\InboxPage.js\\InboxListItem.js",[],"C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\InboxPage.js\\MessageView.js",[],"C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\InboxPage.js\\Sentmessage\\SentMessage.js",[],"C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\InboxPage.js\\Sentmessage\\SendmessageItem.js",["112"],"import React from \"react\";\r\nimport { Col, Container, ListGroup, Row } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { MymailSliceAction } from \"../../../Store/MymailSlice\";\r\n\r\nconst SentMessageListItem = (props) => {\r\n  const sentItems = useSelector((state) => state.mymail.sentItem);\r\n  const Dispatch = useDispatch();\r\n\r\n  let Readreceipt;\r\n  if (!props.readreceipt) {\r\n    Readreceipt = \"readreceipt\";\r\n  }\r\n  const ListItemHandler = () => {\r\n    // console.log(\"sendmeeage page\", props);\r\n    Dispatch(MymailSliceAction.addMessageViewinfo(props));\r\n  };\r\n  const deleteHandler = () => {\r\n    console.log(\"delete\");\r\n    let oldarry = sentItems;\r\n    if (oldarry.length !== 1) {\r\n      let sentItem = oldarry.filter((item) => item.id !== props.id);\r\n      Dispatch(MymailSliceAction.updateSendItem(sentItem));\r\n    } else {\r\n      Dispatch(MymailSliceAction.updateSendItem([]));\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <ListGroup.Item\r\n        id={props.id}\r\n        className=\"m-.3 \"\r\n        key={props.id}\r\n        variant=\"success\"\r\n      >\r\n        <Container>\r\n          <Row>\r\n            <Col className=\"pb-3\">\r\n              <div className=\"readreceiptbox\" onClick={ListItemHandler}>\r\n                <Link to=\"sentmailview\">{props.email}</Link>\r\n              </div>\r\n            </Col>\r\n\r\n            <Col md={1} style={{ height: \"20px\" }}>\r\n              <Button variant=\"secondary\" onClick={deleteHandler}>\r\n                delete\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </ListGroup.Item>\r\n    </>\r\n  );\r\n};\r\nexport default SentMessageListItem;\r\n","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Store\\MymailSlice.js",[],"C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\InboxPage.js\\Sentmessage\\sentMessageView.js",["113"],"import React from \"react\";\r\nimport { Button, Card } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst SentMessageView = (props) => {\r\n  const mymailmessageView = useSelector((state) => state.mymail.messageView);\r\n  const navigate = useNavigate();\r\n  console.log(mymailmessageView, \" mymailmessageView\");\r\n  const replybuttonHandler = () => {\r\n    // navigate(\"/main/text-edit\");\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Card className=\"mt-3\">\r\n        <Card.Header>\r\n          <h3>{mymailmessageView.subject}</h3>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <p className=\"mb-5\">{mymailmessageView.text}</p>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <h6>{mymailmessageView.email}</h6>\r\n          <Button onClick={replybuttonHandler}>ReSend</Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SentMessageView;\r\n","C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\AuthForm\\loginForm.js",[],"C:\\Users\\Admin\\Desktop\\Mail-Box-Clients\\MailBox -Client\\src\\Component\\InboxPage.js\\ToggleMenuButton.js",["114"],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":24,"column":7,"nodeType":"121","messageId":"122","endLine":24,"endColumn":16},{"ruleId":"123","severity":1,"message":"124","line":39,"column":6,"nodeType":"125","endLine":39,"endColumn":23,"suggestions":"126"},{"ruleId":"123","severity":1,"message":"127","line":45,"column":6,"nodeType":"125","endLine":45,"endColumn":17,"suggestions":"128"},{"ruleId":"119","severity":1,"message":"129","line":3,"column":17,"nodeType":"121","messageId":"122","endLine":3,"endColumn":26},{"ruleId":"119","severity":1,"message":"130","line":11,"column":8,"nodeType":"121","messageId":"122","endLine":11,"endColumn":15},{"ruleId":"131","severity":1,"message":"132","line":34,"column":9,"nodeType":"133","messageId":"134","endLine":34,"endColumn":16},{"ruleId":"119","severity":1,"message":"135","line":146,"column":13,"nodeType":"121","messageId":"122","endLine":146,"endColumn":17},{"ruleId":"119","severity":1,"message":"136","line":12,"column":10,"nodeType":"121","messageId":"122","endLine":12,"endColumn":19},{"ruleId":"119","severity":1,"message":"137","line":12,"column":50,"nodeType":"121","messageId":"122","endLine":12,"endColumn":53},{"ruleId":"123","severity":1,"message":"138","line":22,"column":6,"nodeType":"125","endLine":22,"endColumn":8,"suggestions":"139"},{"ruleId":"123","severity":1,"message":"138","line":28,"column":6,"nodeType":"125","endLine":28,"endColumn":13,"suggestions":"140"},{"ruleId":"119","severity":1,"message":"129","line":62,"column":27,"nodeType":"121","messageId":"122","endLine":62,"endColumn":36},{"ruleId":"119","severity":1,"message":"141","line":76,"column":8,"nodeType":"121","messageId":"122","endLine":76,"endColumn":16},{"ruleId":"119","severity":1,"message":"142","line":130,"column":10,"nodeType":"121","messageId":"122","endLine":130,"endColumn":15},{"ruleId":"119","severity":1,"message":"143","line":130,"column":17,"nodeType":"121","messageId":"122","endLine":130,"endColumn":25},{"ruleId":"119","severity":1,"message":"144","line":134,"column":9,"nodeType":"121","messageId":"122","endLine":134,"endColumn":17},{"ruleId":"119","severity":1,"message":"145","line":136,"column":7,"nodeType":"121","messageId":"122","endLine":136,"endColumn":15},{"ruleId":"119","severity":1,"message":"146","line":14,"column":5,"nodeType":"121","messageId":"122","endLine":14,"endColumn":16},{"ruleId":"119","severity":1,"message":"144","line":8,"column":9,"nodeType":"121","messageId":"122","endLine":8,"endColumn":17},{"ruleId":"119","severity":1,"message":"147","line":4,"column":8,"nodeType":"121","messageId":"122","endLine":4,"endColumn":14},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"no-unused-vars","'LoginForm' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'islogin' and 'navi'. Either include them or remove the dependency array.","ArrayExpression",["150"],"React Hook useEffect has missing dependencies: 'Dispatch' and 'sentItem'. Either include them or remove the dependency array.",["151"],"'useEffect' is defined but never used.","'Spinner' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'data' is assigned a value but never used.","'Container' is defined but never used.","'Box' is defined but never used.","React Hook useEffect has a missing dependency: 'Disptach'. Either include it or remove the dependency array.",["152"],["153"],"'MenuIcon' is defined but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'navigate' is assigned a value but never used.","'usermail' is assigned a value but never used.","'Readreceipt' is assigned a value but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},"Update the dependencies array to be: [islogin, loginlocalstore, navi]",{"range":"162","text":"163"},"Update the dependencies array to be: [Dispatch, sendcount, sentItem]",{"range":"164","text":"165"},"Update the dependencies array to be: [Disptach]",{"range":"166","text":"167"},"Update the dependencies array to be: [Disptach, count]",{"range":"168","text":"169"},[1542,1559],"[islogin, loginlocalstore, navi]",[1764,1775],"[Dispatch, sendcount, sentItem]",[900,902],"[Disptach]",[998,1005],"[Disptach, count]"]